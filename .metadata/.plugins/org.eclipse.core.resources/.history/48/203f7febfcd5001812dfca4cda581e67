package leetcode;

import common.ListNode;

public class leetcode234 {
	// Given a singly linked list, determine if it is a palindrome.
	//
	// Example 1:
	//
	// Input: 1->2
	// Output: false
	// Example 2:
	//
	// Input: 1->2->2->1
	// Output: true
	// Follow up:
	// Could you do it in O(n) time and O(1) space?

	public boolean isPalindrome(ListNode head) {
		if (head == null) {
			return true;
		}
		ListNode middle = findMid(head);
		middle.next = reverse(middle.next);
	}

	private ListNode reverse(ListNode head) {
		 ListNode prev = null;
	        while (head != null) {
	            ListNode temp = head.next;
	            head.next = prev;
	            prev = head;
	            head = temp;
	        }
	        return prev;
	}

	private ListNode findMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
}
